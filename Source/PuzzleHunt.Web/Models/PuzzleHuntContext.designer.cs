#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PuzzleHunt.Web.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PuzzleHunt")]
	public partial class PuzzleHuntContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHint(Hint instance);
    partial void UpdateHint(Hint instance);
    partial void DeleteHint(Hint instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertHunt(Hunt instance);
    partial void UpdateHunt(Hunt instance);
    partial void DeleteHunt(Hunt instance);
    partial void InsertPuzzle(Puzzle instance);
    partial void UpdatePuzzle(Puzzle instance);
    partial void DeletePuzzle(Puzzle instance);
    partial void InsertTeamHintRequest(TeamHintRequest instance);
    partial void UpdateTeamHintRequest(TeamHintRequest instance);
    partial void DeleteTeamHintRequest(TeamHintRequest instance);
    partial void InsertTeamMembership(TeamMembership instance);
    partial void UpdateTeamMembership(TeamMembership instance);
    partial void DeleteTeamMembership(TeamMembership instance);
    partial void InsertTeamPuzzleResult(TeamPuzzleResult instance);
    partial void UpdateTeamPuzzleResult(TeamPuzzleResult instance);
    partial void DeleteTeamPuzzleResult(TeamPuzzleResult instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamGuess(TeamGuess instance);
    partial void UpdateTeamGuess(TeamGuess instance);
    partial void DeleteTeamGuess(TeamGuess instance);
    #endregion
		
		public PuzzleHuntContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PuzzleHuntConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PuzzleHuntContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PuzzleHuntContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PuzzleHuntContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PuzzleHuntContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hint> Hints
		{
			get
			{
				return this.GetTable<Hint>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Hunt> Hunts
		{
			get
			{
				return this.GetTable<Hunt>();
			}
		}
		
		public System.Data.Linq.Table<Puzzle> Puzzles
		{
			get
			{
				return this.GetTable<Puzzle>();
			}
		}
		
		public System.Data.Linq.Table<TeamHintRequest> TeamHintRequests
		{
			get
			{
				return this.GetTable<TeamHintRequest>();
			}
		}
		
		public System.Data.Linq.Table<TeamMembership> TeamMemberships
		{
			get
			{
				return this.GetTable<TeamMembership>();
			}
		}
		
		public System.Data.Linq.Table<TeamPuzzleResult> TeamPuzzleResults
		{
			get
			{
				return this.GetTable<TeamPuzzleResult>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamGuess> TeamGuesses
		{
			get
			{
				return this.GetTable<TeamGuess>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hints")]
	public partial class Hint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PuzzleId;
		
		private int _Order;
		
		private string _Content;
		
		private EntitySet<TeamHintRequest> _TeamHintRequests;
		
		private EntityRef<Puzzle> _Puzzle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPuzzleIdChanging(int value);
    partial void OnPuzzleIdChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Hint()
		{
			this._TeamHintRequests = new EntitySet<TeamHintRequest>(new Action<TeamHintRequest>(this.attach_TeamHintRequests), new Action<TeamHintRequest>(this.detach_TeamHintRequests));
			this._Puzzle = default(EntityRef<Puzzle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PuzzleId", DbType="Int NOT NULL")]
		public int PuzzleId
		{
			get
			{
				return this._PuzzleId;
			}
			set
			{
				if ((this._PuzzleId != value))
				{
					if (this._Puzzle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPuzzleIdChanging(value);
					this.SendPropertyChanging();
					this._PuzzleId = value;
					this.SendPropertyChanged("PuzzleId");
					this.OnPuzzleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hint_TeamHintRequest", Storage="_TeamHintRequests", ThisKey="Id", OtherKey="HintId")]
		public EntitySet<TeamHintRequest> TeamHintRequests
		{
			get
			{
				return this._TeamHintRequests;
			}
			set
			{
				this._TeamHintRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_Hint", Storage="_Puzzle", ThisKey="PuzzleId", OtherKey="Id", IsForeignKey=true)]
		public Puzzle Puzzle
		{
			get
			{
				return this._Puzzle.Entity;
			}
			set
			{
				Puzzle previousValue = this._Puzzle.Entity;
				if (((previousValue != value) 
							|| (this._Puzzle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puzzle.Entity = null;
						previousValue.Hints.Remove(this);
					}
					this._Puzzle.Entity = value;
					if ((value != null))
					{
						value.Hints.Add(this);
						this._PuzzleId = value.Id;
					}
					else
					{
						this._PuzzleId = default(int);
					}
					this.SendPropertyChanged("Puzzle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamHintRequests(TeamHintRequest entity)
		{
			this.SendPropertyChanging();
			entity.Hint = this;
		}
		
		private void detach_TeamHintRequests(TeamHintRequest entity)
		{
			this.SendPropertyChanging();
			entity.Hint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<Hunt> _Hunts;
		
		private EntitySet<Puzzle> _Puzzles;
		
		private EntitySet<TeamMembership> _TeamMemberships;
		
		private EntitySet<TeamGuess> _TeamGuesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Hunts = new EntitySet<Hunt>(new Action<Hunt>(this.attach_Hunts), new Action<Hunt>(this.detach_Hunts));
			this._Puzzles = new EntitySet<Puzzle>(new Action<Puzzle>(this.attach_Puzzles), new Action<Puzzle>(this.detach_Puzzles));
			this._TeamMemberships = new EntitySet<TeamMembership>(new Action<TeamMembership>(this.attach_TeamMemberships), new Action<TeamMembership>(this.detach_TeamMemberships));
			this._TeamGuesses = new EntitySet<TeamGuess>(new Action<TeamGuess>(this.attach_TeamGuesses), new Action<TeamGuess>(this.detach_TeamGuesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hunt", Storage="_Hunts", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<Hunt> Hunts
		{
			get
			{
				return this._Hunts;
			}
			set
			{
				this._Hunts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Puzzle", Storage="_Puzzles", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<Puzzle> Puzzles
		{
			get
			{
				return this._Puzzles;
			}
			set
			{
				this._Puzzles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamMembership", Storage="_TeamMemberships", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TeamMembership> TeamMemberships
		{
			get
			{
				return this._TeamMemberships;
			}
			set
			{
				this._TeamMemberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamGuess", Storage="_TeamGuesses", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TeamGuess> TeamGuesses
		{
			get
			{
				return this._TeamGuesses;
			}
			set
			{
				this._TeamGuesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hunts(Hunt entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Hunts(Hunt entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Puzzles(Puzzle entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Puzzles(Puzzle entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TeamMemberships(TeamMembership entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TeamMemberships(TeamMembership entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TeamGuesses(TeamGuess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TeamGuesses(TeamGuess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hunts")]
	public partial class Hunt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CreatorId;
		
		private string _Name;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private EntitySet<Puzzle> _Puzzles;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Hunt()
		{
			this._Puzzles = new EntitySet<Puzzle>(new Action<Puzzle>(this.attach_Puzzles), new Action<Puzzle>(this.detach_Puzzles));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hunt_Puzzle", Storage="_Puzzles", ThisKey="Id", OtherKey="HuntId")]
		public EntitySet<Puzzle> Puzzles
		{
			get
			{
				return this._Puzzles;
			}
			set
			{
				this._Puzzles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hunt_Team", Storage="_Teams", ThisKey="Id", OtherKey="HuntId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hunt", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Hunts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Hunts.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Puzzles(Puzzle entity)
		{
			this.SendPropertyChanging();
			entity.Hunt = this;
		}
		
		private void detach_Puzzles(Puzzle entity)
		{
			this.SendPropertyChanging();
			entity.Hunt = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Hunt = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Hunt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Puzzles")]
	public partial class Puzzle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _HuntId;
		
		private int _CreatorId;
		
		private int _Order;
		
		private string _Difficulty;
		
		private string _Name;
		
		private string _Answer;
		
		private string _Content;
		
		private string _Solution;
		
		private EntitySet<Hint> _Hints;
		
		private EntitySet<TeamPuzzleResult> _TeamPuzzleResults;
		
		private EntitySet<TeamGuess> _TeamGuesses;
		
		private EntityRef<Hunt> _Hunt;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHuntIdChanging(int value);
    partial void OnHuntIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnDifficultyChanging(string value);
    partial void OnDifficultyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    #endregion
		
		public Puzzle()
		{
			this._Hints = new EntitySet<Hint>(new Action<Hint>(this.attach_Hints), new Action<Hint>(this.detach_Hints));
			this._TeamPuzzleResults = new EntitySet<TeamPuzzleResult>(new Action<TeamPuzzleResult>(this.attach_TeamPuzzleResults), new Action<TeamPuzzleResult>(this.detach_TeamPuzzleResults));
			this._TeamGuesses = new EntitySet<TeamGuess>(new Action<TeamGuess>(this.attach_TeamGuesses), new Action<TeamGuess>(this.detach_TeamGuesses));
			this._Hunt = default(EntityRef<Hunt>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HuntId", DbType="Int NOT NULL")]
		public int HuntId
		{
			get
			{
				return this._HuntId;
			}
			set
			{
				if ((this._HuntId != value))
				{
					if (this._Hunt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHuntIdChanging(value);
					this.SendPropertyChanging();
					this._HuntId = value;
					this.SendPropertyChanged("HuntId");
					this.OnHuntIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difficulty", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Difficulty
		{
			get
			{
				return this._Difficulty;
			}
			set
			{
				if ((this._Difficulty != value))
				{
					this.OnDifficultyChanging(value);
					this.SendPropertyChanging();
					this._Difficulty = value;
					this.SendPropertyChanged("Difficulty");
					this.OnDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="NVarChar(MAX)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_Hint", Storage="_Hints", ThisKey="Id", OtherKey="PuzzleId")]
		public EntitySet<Hint> Hints
		{
			get
			{
				return this._Hints;
			}
			set
			{
				this._Hints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_TeamPuzzleResult", Storage="_TeamPuzzleResults", ThisKey="Id", OtherKey="PuzzleId")]
		public EntitySet<TeamPuzzleResult> TeamPuzzleResults
		{
			get
			{
				return this._TeamPuzzleResults;
			}
			set
			{
				this._TeamPuzzleResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_TeamGuess", Storage="_TeamGuesses", ThisKey="Id", OtherKey="PuzzleId")]
		public EntitySet<TeamGuess> TeamGuesses
		{
			get
			{
				return this._TeamGuesses;
			}
			set
			{
				this._TeamGuesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hunt_Puzzle", Storage="_Hunt", ThisKey="HuntId", OtherKey="Id", IsForeignKey=true)]
		public Hunt Hunt
		{
			get
			{
				return this._Hunt.Entity;
			}
			set
			{
				Hunt previousValue = this._Hunt.Entity;
				if (((previousValue != value) 
							|| (this._Hunt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hunt.Entity = null;
						previousValue.Puzzles.Remove(this);
					}
					this._Hunt.Entity = value;
					if ((value != null))
					{
						value.Puzzles.Add(this);
						this._HuntId = value.Id;
					}
					else
					{
						this._HuntId = default(int);
					}
					this.SendPropertyChanged("Hunt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Puzzle", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Puzzles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Puzzles.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hints(Hint entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = this;
		}
		
		private void detach_Hints(Hint entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = null;
		}
		
		private void attach_TeamPuzzleResults(TeamPuzzleResult entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = this;
		}
		
		private void detach_TeamPuzzleResults(TeamPuzzleResult entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = null;
		}
		
		private void attach_TeamGuesses(TeamGuess entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = this;
		}
		
		private void detach_TeamGuesses(TeamGuess entity)
		{
			this.SendPropertyChanging();
			entity.Puzzle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamHintRequests")]
	public partial class TeamHintRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeamId;
		
		private int _HintId;
		
		private System.DateTime _RequestTime;
		
		private EntityRef<Hint> _Hint;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnHintIdChanging(int value);
    partial void OnHintIdChanged();
    partial void OnRequestTimeChanging(System.DateTime value);
    partial void OnRequestTimeChanged();
    #endregion
		
		public TeamHintRequest()
		{
			this._Hint = default(EntityRef<Hint>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HintId", DbType="Int NOT NULL")]
		public int HintId
		{
			get
			{
				return this._HintId;
			}
			set
			{
				if ((this._HintId != value))
				{
					if (this._Hint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHintIdChanging(value);
					this.SendPropertyChanging();
					this._HintId = value;
					this.SendPropertyChanged("HintId");
					this.OnHintIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTime", DbType="DateTime NOT NULL")]
		public System.DateTime RequestTime
		{
			get
			{
				return this._RequestTime;
			}
			set
			{
				if ((this._RequestTime != value))
				{
					this.OnRequestTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestTime = value;
					this.SendPropertyChanged("RequestTime");
					this.OnRequestTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hint_TeamHintRequest", Storage="_Hint", ThisKey="HintId", OtherKey="Id", IsForeignKey=true)]
		public Hint Hint
		{
			get
			{
				return this._Hint.Entity;
			}
			set
			{
				Hint previousValue = this._Hint.Entity;
				if (((previousValue != value) 
							|| (this._Hint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hint.Entity = null;
						previousValue.TeamHintRequests.Remove(this);
					}
					this._Hint.Entity = value;
					if ((value != null))
					{
						value.TeamHintRequests.Add(this);
						this._HintId = value.Id;
					}
					else
					{
						this._HintId = default(int);
					}
					this.SendPropertyChanged("Hint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamHintRequest", Storage="_Team", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamHintRequest = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamHintRequest = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamMemberships")]
	public partial class TeamMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private int _UserId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public TeamMembership()
		{
			this._User = default(EntityRef<User>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamMembership", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeamMemberships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeamMemberships.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMembership", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamMemberships.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamMemberships.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamPuzzleResults")]
	public partial class TeamPuzzleResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeamId;
		
		private int _PuzzleId;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private EntityRef<Puzzle> _Puzzle;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnPuzzleIdChanging(int value);
    partial void OnPuzzleIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    #endregion
		
		public TeamPuzzleResult()
		{
			this._Puzzle = default(EntityRef<Puzzle>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PuzzleId", DbType="Int NOT NULL")]
		public int PuzzleId
		{
			get
			{
				return this._PuzzleId;
			}
			set
			{
				if ((this._PuzzleId != value))
				{
					if (this._Puzzle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPuzzleIdChanging(value);
					this.SendPropertyChanging();
					this._PuzzleId = value;
					this.SendPropertyChanged("PuzzleId");
					this.OnPuzzleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_TeamPuzzleResult", Storage="_Puzzle", ThisKey="PuzzleId", OtherKey="Id", IsForeignKey=true)]
		public Puzzle Puzzle
		{
			get
			{
				return this._Puzzle.Entity;
			}
			set
			{
				Puzzle previousValue = this._Puzzle.Entity;
				if (((previousValue != value) 
							|| (this._Puzzle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puzzle.Entity = null;
						previousValue.TeamPuzzleResults.Remove(this);
					}
					this._Puzzle.Entity = value;
					if ((value != null))
					{
						value.TeamPuzzleResults.Add(this);
						this._PuzzleId = value.Id;
					}
					else
					{
						this._PuzzleId = default(int);
					}
					this.SendPropertyChanged("Puzzle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamPuzzleResult", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamPuzzleResults.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamPuzzleResults.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _HuntId;
		
		private string _Name;
		
		private string _Password;
		
		private EntityRef<TeamHintRequest> _TeamHintRequest;
		
		private EntitySet<TeamMembership> _TeamMemberships;
		
		private EntitySet<TeamPuzzleResult> _TeamPuzzleResults;
		
		private EntityRef<Hunt> _Hunt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHuntIdChanging(int value);
    partial void OnHuntIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Team()
		{
			this._TeamHintRequest = default(EntityRef<TeamHintRequest>);
			this._TeamMemberships = new EntitySet<TeamMembership>(new Action<TeamMembership>(this.attach_TeamMemberships), new Action<TeamMembership>(this.detach_TeamMemberships));
			this._TeamPuzzleResults = new EntitySet<TeamPuzzleResult>(new Action<TeamPuzzleResult>(this.attach_TeamPuzzleResults), new Action<TeamPuzzleResult>(this.detach_TeamPuzzleResults));
			this._Hunt = default(EntityRef<Hunt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HuntId", DbType="Int NOT NULL")]
		public int HuntId
		{
			get
			{
				return this._HuntId;
			}
			set
			{
				if ((this._HuntId != value))
				{
					if (this._Hunt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHuntIdChanging(value);
					this.SendPropertyChanging();
					this._HuntId = value;
					this.SendPropertyChanged("HuntId");
					this.OnHuntIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamHintRequest", Storage="_TeamHintRequest", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public TeamHintRequest TeamHintRequest
		{
			get
			{
				return this._TeamHintRequest.Entity;
			}
			set
			{
				TeamHintRequest previousValue = this._TeamHintRequest.Entity;
				if (((previousValue != value) 
							|| (this._TeamHintRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamHintRequest.Entity = null;
						previousValue.Team = null;
					}
					this._TeamHintRequest.Entity = value;
					if ((value != null))
					{
						value.Team = this;
					}
					this.SendPropertyChanged("TeamHintRequest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMembership", Storage="_TeamMemberships", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamMembership> TeamMemberships
		{
			get
			{
				return this._TeamMemberships;
			}
			set
			{
				this._TeamMemberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamPuzzleResult", Storage="_TeamPuzzleResults", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamPuzzleResult> TeamPuzzleResults
		{
			get
			{
				return this._TeamPuzzleResults;
			}
			set
			{
				this._TeamPuzzleResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hunt_Team", Storage="_Hunt", ThisKey="HuntId", OtherKey="Id", IsForeignKey=true)]
		public Hunt Hunt
		{
			get
			{
				return this._Hunt.Entity;
			}
			set
			{
				Hunt previousValue = this._Hunt.Entity;
				if (((previousValue != value) 
							|| (this._Hunt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hunt.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Hunt.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._HuntId = value.Id;
					}
					else
					{
						this._HuntId = default(int);
					}
					this.SendPropertyChanged("Hunt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamMemberships(TeamMembership entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamMemberships(TeamMembership entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamPuzzleResults(TeamPuzzleResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamPuzzleResults(TeamPuzzleResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamGuesses")]
	public partial class TeamGuess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _PuzzleId;
		
		private System.DateTime _Time;
		
		private string _Guess;
		
		private EntityRef<Puzzle> _Puzzle;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPuzzleIdChanging(int value);
    partial void OnPuzzleIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnGuessChanging(string value);
    partial void OnGuessChanged();
    #endregion
		
		public TeamGuess()
		{
			this._Puzzle = default(EntityRef<Puzzle>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PuzzleId", DbType="Int NOT NULL")]
		public int PuzzleId
		{
			get
			{
				return this._PuzzleId;
			}
			set
			{
				if ((this._PuzzleId != value))
				{
					if (this._Puzzle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPuzzleIdChanging(value);
					this.SendPropertyChanging();
					this._PuzzleId = value;
					this.SendPropertyChanged("PuzzleId");
					this.OnPuzzleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guess", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Guess
		{
			get
			{
				return this._Guess;
			}
			set
			{
				if ((this._Guess != value))
				{
					this.OnGuessChanging(value);
					this.SendPropertyChanging();
					this._Guess = value;
					this.SendPropertyChanged("Guess");
					this.OnGuessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Puzzle_TeamGuess", Storage="_Puzzle", ThisKey="PuzzleId", OtherKey="Id", IsForeignKey=true)]
		public Puzzle Puzzle
		{
			get
			{
				return this._Puzzle.Entity;
			}
			set
			{
				Puzzle previousValue = this._Puzzle.Entity;
				if (((previousValue != value) 
							|| (this._Puzzle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puzzle.Entity = null;
						previousValue.TeamGuesses.Remove(this);
					}
					this._Puzzle.Entity = value;
					if ((value != null))
					{
						value.TeamGuesses.Add(this);
						this._PuzzleId = value.Id;
					}
					else
					{
						this._PuzzleId = default(int);
					}
					this.SendPropertyChanged("Puzzle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamGuess", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeamGuesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeamGuesses.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
